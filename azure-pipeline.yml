variables:
  - group: clean-solution
  - name: 'vmImageName'
    value: 'ubuntu-20.04'
  - name: 'workingDirectory'
    value: '$(System.DefaultWorkingDirectory)'
  - name: 'reportsFolder'
    value: '$(Build.ArtifactStagingDirectory)/reports'
  - name: 'reportsArchiveFile'
    value: '$(Build.ArtifactStagingDirectory)/reports.zip'
  - name: 'reportsArtifactName'
    value: 'reports-$(Build.BuildNumber)'

stages:
  - stage: upload
    displayName: Upload Nuget Package

    jobs:
      - job: upload
        displayName: Upload Nuget Package
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET Core sdk'
            inputs:
              packageType: sdk
              version: 6.0.1
              installationPath: $(Agent.ToolsDirectory)/dotnet
              
          - task: Bash@3
            displayName: Install coverlet
            inputs:
              targetType: 'inline'
              script: |
                dotnet tool install --global coverlet.console --version 3.0.3
                  
          - task: Bash@3
            displayName: Install report generator
            inputs:
              targetType: 'inline'
              script: |
                dotnet tool install --global dotnet-reportgenerator-globaltool

          - task: Bash@3
            displayName: Build solution
            inputs:
              targetType: 'inline'
              script: |
                dotnet build
                
          - task: Bash@3
            displayName: Run unit tests
            inputs:
              targetType: 'inline'
              script: |
                dotnet test --settings settings/coverlet-runsettings.xml --logger trx --results-directory "test-results"
                
          - task: Bash@3
            displayName: Generate reports
            condition: always()
            inputs:
              targetType: 'inline'
              script: |
                reportgenerator "-reports:test-results/**/*.opencover.xml" "-targetdir:test-report"

          - task: Bash@3
            displayName: Prepare Artifact Folder
            condition: always()
            inputs:
              targetType: 'inline'
              script: |
                mkdir $(reportsFolder)
                ls
                if [ -d "./app/test-report" ]
                then
                  cp -r ./app/test-report $(reportsFolder)-dev
                fi
                
          - task: ArchiveFiles@2
            displayName: Archive Reports
            condition: always()
            inputs:
              rootFolderOrFile: '$(reportsFolder)'
              inlcludeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(reportsArchiveFile)'
              replaceExistingArchive: true

          - task: PublishPipelineArtifact@1
            displayName: Publish Reports
            condition: always()
            inputs:
              targetPath: '$(reportsArchiveFile)'
              artifact: 'ci-reports'
              publishLocation: 'pipeline'

          - task: Bash@3
            displayName: Clear Artifact Staging Directory
            condition: always()
            inputs:
              targetType: 'inline'
              script: |
                rm -rf $(Build.ArtifactStagingDirectory)/*

      